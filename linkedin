pip install layker — shipping v1.0.1 (my first open-source package): Lakehouse-Aligned YAML Kit for Engineering Rules — your lake-layer IaC

TL;DR
Your lakehouse is its tables. layker is a Spark-native, YAML-driven, idempotent table-schema/metadata reconciler that keeps definitions readable, auditable, and low-noise. One YAML per table; layker reconciles: properties, columns, comments/tags, constraints, masking policies, and row filters with the live Delta table (validate → diff → apply → audit).

Why layker
Policies and intent drift across notebooks, ad-hoc DDL, and UIs. With layker, one YAML per table becomes the source of truth that humans (and AI) can read, diff, and reason about. layker enforces the spec and records an auditable history. It’s a table-metadata tool—everything about a table except the data—so you get CI/CD for schema evolution: propose add/rename/drop via PRs on YAML, and reconcile live tables back to spec after out-of-band changes. Flexible (inline in ETL or standalone) and configurable (point the audit sink anywhere), strictly idempotent.

How it works
• Validate → Diff → Apply → Audit
• No-op if nothing changed; applies only deltas
• Guardrails for safe Delta schema evolution; structured audit (before / diff / after)
• Flexible: inline in ETL or standalone; configurable audit sink; minimal deps

Docs: https://levi-gagne.github.io/layker/
Repo: https://github.com/Levi-Gagne/layker

Built for Delta today; Iceberg on the roadmap.
If you’re Spark/Delta-native and want lake-layer IaC that keeps metadata clean and auditable, kick the tires—stars/issues/PRs welcome.

#Spark #DeltaLake #Databricks #DataEngineering #IaC #YAML #OpenSource #AustinTech